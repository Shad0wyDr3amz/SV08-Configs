# For Eddy USB/Duo, include the mcu and temperature sensor sections.
# Omit for Eddy Coil
[mcu eddy]
# Or whatever is appropriate for CAN
serial: /dev/serial/by-id/usb-Klipper_rp2040_504450611860CE1C-if00 
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 100

[temperature_sensor btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26

# For all Eddy (USB/Duo/Coil)
[probe_eddy_ng btt_eddy]
sensor_type: ldc1612
# Eddy USB/Duo values below. For Eddy Coil, replace these two with mcu/bus for your setup.
i2c_mcu: eddy
i2c_bus: i2c0f
samples_per_second: 500 # 250 by default
x_offset: -18.0
y_offset: 6.0
#z_offset: 2.5

# #reg_drive_current: 16
# tap_drive_current: 16
# tap_adjust_z: 0.140
tap_target_z: -.350

# [bed_mesh]
# speed: 150 #500
# horizontal_move_z: 3
# mesh_min: 15,18 # These min/max points are with the above linked Eddy mount on the stock toolhead.
# mesh_max: 335,335
# probe_count: 15,15 # 25,25 # Set to a lower 15,15 default as it appears a too high probe_count (too dense mesh) is bad with rapid_scan, see: https://www.klipper3d.org/Bed_Mesh.html#rapid-continuous-scanning
# algorithm: bicubic
# bicubic_tension: 0.5
# split_delta_z: 0.0125 # see: https://www.klipper3d.org/Bed_Mesh.html#move-splitting
# mesh_pps: 3,3
# adaptive_margin: 5
# fade_start: 1
# fade_end: 10
# fade_target: 0
# #scan_overshoot: 5  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

[bed_mesh]
horizontal_move_z: 2 # set this to the same value as home_trigger_height (i.e. 2)
speed: 200
# mesh min x,y = bed_min_x + max(15, min(x_offs, 0)) , bed_min_y + max(15, min(y_offs, 0))
# mesh max x,y = bed_max_x - max(15, abs(x_offs)) , bed_max_y - max(15, abs(y_offs)) - fudge for scan overshoot
##mesh_min: 15, 15
##mesh_max: 334, 333
mesh_min: 20, 20
mesh_max: 330, 330
# extra x-axis movement to smooth out moves
scan_overshoot: 5
probe_count: 20, 20 # 30, 30 # 15, 15  # too dense a mesh is bad with rapid scan due to noise from the probe. # noise is fixed, I think
algorithm: bicubic
bicubic_tension: 0.5
split_delta_z: 0.0125
# interpolate 3 points per probed point
mesh_pps: 2,2 # 3,3
adaptive_margin: 5
# layers to start fading out Z adjustment and to end it, with a target of 0
fade_start: 1
fade_end: 10
fade_target: 0

[homing_override]
gcode:
  # Move 5 up, just in case (this is our safety zhop, this needs 'set_position_z: 0' below)
  #STATUS_HOMING
  G91 ; set relative positioning
  G0 Z5 F1000 ; 5 up zhop
  {% if not rawparams or 'X' in rawparams|upper %}
    {action_respond_info('Homing X')}
    G28 X
    G90 ; set absolute positioning
    G0 X177.5 F6000 ; return to center
    M400 ; Wait for move to finish
  {% endif %}
  {% if not rawparams or 'Y' in rawparams|upper %}
    {action_respond_info('Homing Y')}
    G28 Y
    ;;G91 ; set relative positioning
    ;;G0 Y-30 F600 ; move a bit out
    ;;G28 Y ; then re-home Y, just in case we hit the motor klunk
    G90 ; set absolute positioning
    G0 Y177.5 F6000 ; return to center
    M400 ; Wait for move to finish
  {% endif %}
  {% if not rawparams or 'Z' in rawparams|upper %}
    {action_respond_info('Homing Z')}
    G90 ; set absolute positioning
    G0 X177.5 Y177.5 F6000 ; return to center, please add your offsets manually if you want to
    G28 Z ; do the coarse home
    G90 ; set absolute positioning
    G0 Z2 F1000 ; to 2mm ; TODO -- do we need this?
    G4 S1 ; chill for a sec
    M400 ; Wait for move to finish
    PROBE_EDDY_NG_PROBE_STATIC HOME_Z=1
    G0 Z5 F1000 ; to 5mm as home
  {% endif %}
  G90 ; set absolute positioning
  #STATUS_READY
axes: xyz
set_position_z: 0 # This forces the z position to be at 0 when we start homing, so we can move the Z up before homing.

[gcode_macro G29]
description: Performs Quad Gantry Leveling (if needed) and Bed Mesh Calibration
gcode:
    # Save current state
    SAVE_GCODE_STATE NAME=STATE_G29
    
    # First handle QGL if needed
    {% if not printer.quad_gantry_level.applied %}
        QUAD_GANTRY_LEVEL           # This calls our combined QGL macro which handles all homing checks
    {% endif %}
    
    # Now perform bed mesh calibration
    #STATUS_MESHING                  # If you have this status LED option
    BED_MESH_CALIBRATE ADAPTIVE=1 Method=rapid_scan
    
   
    # Final Z home
    #STATUS_HOMING
    G28 Z
    
    # Restore state and indicate ready
    RESTORE_GCODE_STATE NAME=STATE_G29
    #STATUS_READY